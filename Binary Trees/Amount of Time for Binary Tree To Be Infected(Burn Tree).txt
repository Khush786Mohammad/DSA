/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    private:
    void findParent(TreeNode* root,unordered_map<TreeNode*,TreeNode*>& node_to_parent,TreeNode* &startNode,int start)
    {
        queue<TreeNode*>q;
        node_to_parent[root] = root;
        q.push(root);

        while(!q.empty())
        {
            TreeNode* frontNode = q.front();
            q.pop();

            //check if the current node is the startNode
            if(start == frontNode->val)
            startNode = frontNode;

            if(frontNode->left)
            {
                node_to_parent[frontNode->left] = frontNode;
                q.push(frontNode->left);
            }
            if(frontNode->right)
            {
                node_to_parent[frontNode->right] = frontNode;
                q.push(frontNode->right);
            }
        }
    }

    void findMinTime(TreeNode* root,unordered_map<TreeNode*,TreeNode*>& node_to_parent,TreeNode* start,int &ans)
    {
        queue<TreeNode*> q;
        unordered_map<TreeNode*,bool> visited;
        q.push(start);
        while(!q.empty())
        {
            bool isVisited = false;
        
            int size = q.size();
            for(int i = 0 ; i<size ; i++)
            {
                TreeNode* frontNode = q.front();
                q.pop();
                visited[frontNode] = true;

                if(frontNode->left&& visited[frontNode->left] != true)
                {
                    visited[frontNode->left] = true;
                    q.push(frontNode->left);
                    isVisited = true;
                }
                if(frontNode->right && visited[frontNode->right] != true)
                {
                    visited[frontNode->right] = true;
                    q.push(frontNode->right);
                    isVisited = true;
                }

                TreeNode* parent = node_to_parent[frontNode];

                if(!visited[parent])
                {
                    visited[parent] = true;
                    q.push(parent);
                    isVisited = true;
                }
            }

            if(isVisited)
            ans++;
        }
    }
public:
    int amountOfTime(TreeNode* root, int start) {
        TreeNode* startNode = NULL;
        unordered_map<TreeNode*,TreeNode*> node_to_parent;

        findParent(root,node_to_parent,startNode,start);

        int ans = 0;
        findMinTime(root,node_to_parent,startNode,ans);
        return ans;        
    }
};