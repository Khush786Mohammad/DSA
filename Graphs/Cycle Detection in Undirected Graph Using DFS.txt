#include<unordered_map>
#include<list>
#include<queue>

bool isCycleDfs(int node , int parent , unordered_map<int,bool> &visited , unordered_map<int,list<int>> &adj)
{
    visited[node] = 1;

    for(auto neighbour : adj[node])
    {
        if(visited[neighbour] == true && neighbour != parent)
        {
            return true;
        }
        else if(!visited[neighbour])
        {
             if(isCycleDfs(neighbour,node,visited,adj))
             return true;

        }
    }
    return false;
}
string cycleDetection (vector<vector<int>>& edges, int n, int m)
{
    unordered_map<int,list<int>> adj;

    for(int i = 0 ; i<m ; i++)
    {
        int u = edges[i][0];
        int v = edges[i][1];

        adj[u].push_back(v);
        adj[v].push_back(u);
    }

    unordered_map<int,bool> visited;
    // for  disconnected components;

    for(int i = 1 ; i<=n ; i++)
    {
        if(!visited[i])
        {
            if(isCycleDfs(i,-1,visited,adj))
            return "Yes";
        }
    }
    return "No";
}
