#include<unordered_map>
#include<list>

bool isCycleDfs(unordered_map<int,list<int>> &adj, unordered_map<int,bool> &visited
, unordered_map<int,bool> &dfsVisited , int node)
{
  visited[node] = true;
  dfsVisited[node] = true;

  for(auto i : adj[node])
  {
    if(!visited[i])
    {
      bool cycle = isCycleDfs(adj, visited, dfsVisited, i);
      if(cycle)
      return true;
    }
    else{
      if(dfsVisited[i] == true)
      return true;
    }
  }
  dfsVisited[node] = false;
  return false;
}

int detectCycleInDirectedGraph(int n, vector < pair < int, int >> & edges) {
  
  unordered_map<int,list<int>> adj;

  for(int i = 0 ; i<edges.size() ; i++)
  {
    int u = edges[i].first;
    int v = edges[i].second;

    adj[u].push_back(v);
  }

  //call dfs for all components;

  unordered_map<int,bool> visited;
  unordered_map<int,bool> dfsVisited;

  for(int i = 1 ; i<=n ; i++)
  {
    if(!visited[i])
    {
       bool cycle = isCycleDfs(adj,visited,dfsVisited,i);
       if(cycle)
       return true;
    }
  }
  return false;
}