#include<bits/stdc++.h>

vector<int> shortestPath( vector<pair<int,int>> edges , int n , int m, int s , int t){

	unordered_map<int , list<int>> adj;
	int size = edges.size();
	
	for(int i = 0 ; i< size; i++)
	{
		int u = edges[i].first;
		int v = edges[i].second;

		adj[u].push_back(v);
		adj[v].push_back(u);
	}
	
	unordered_map<int,int> parent;
	unordered_map<int,bool> visited;

	visited[s] = true;
	parent[s] = -1;

	queue<int> q;
	q.push(s);

	while(!q.empty())
	{
		int frontNode = q.front();
		q.pop();

		for(auto &neighbour : adj[frontNode])
		{
			if(!visited[neighbour])
			{
				q.push(neighbour);
				visited[neighbour] = true;
				parent[neighbour] = frontNode;
			}
		}
	}

	vector<int> ans;
	ans.push_back(t);

	int currNode = t;

	while(currNode != s)
	{
		currNode = parent[currNode];
		ans.push_back(currNode);
	}
	reverse(ans.begin() , ans.end());
	return ans;
}
