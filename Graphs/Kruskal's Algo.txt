class DisjointSet{
    
    vector<int> parent,rank;
    public:
    DisjointSet(int n)
    {
        parent.resize(n+1);
        rank.resize(n+1,0);
        
        for(int i = 0 ; i<=n ; i++)
        {
            parent[i] = i;
        }
    }
    
    int findUlParent(int node)
    {
        if(node == parent[node])
        return node;
        
        return parent[node] = findUlParent(parent[node]);
    }
    
    void UnionByRank(int u , int v)
    {
        int ul_pu = findUlParent(u);
        int ul_pv = findUlParent(v);
        
        if(ul_pu == ul_pv)
        return ;
        
        if(rank[ul_pu] < rank[ul_pv])
        {
            parent[ul_pu] = ul_pv;
        }
        else if(rank[ul_pv] < rank[ul_pu])
        {
            parent[ul_pv] = ul_pu;
        }
        else
        {
            parent[ul_pu] = ul_pv;
            rank[ul_pv]++;
        }
    }
    
};
class Solution
{
	public:
	//Function to find sum of weights of edges of the Minimum Spanning Tree.
    int spanningTree(int V, vector<vector<int>> adj[])
    {
        // Kruskal's Algorithm
        
        //{wt,{u,v}}
        vector<pair<int,pair<int,int>>> edges;
        
        // O(V+E)
        for(int i = 0 ; i<V ; i++)
        {
            for(auto it : adj[i])
            {
                int u = i;
                int v = it[0];
                int wt = it[1];
                
                edges.push_back({wt,{i,v}});
            }
        }
        
        //sort the edges according to the weights
        // E LogE
        
        sort(edges.begin() , edges.end());
        int mstWt = 0;
        DisjointSet ds(V);
        
        //E * 4 * alpha = E
        for(auto it : edges)
        {
            int edgWt = it.first;
            int u = it.second.first;
            int v = it.second.second;
            
             if(ds.findUlParent(u) != ds.findUlParent(v))
                {
                    mstWt += edgWt;
                    ds.UnionByRank(u,v);
                }
        }
        return mstWt;
    }
};