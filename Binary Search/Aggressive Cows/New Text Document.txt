class Solution {
    private:
    bool canPlace(vector<int>& stalls, int distance , int cows)
    {
        //as 1 cow is already place on the first stall;
        int cntCow = 1;
        int lastCow = stalls[0];
        int n = stalls.size();
        
        for(int i = 1 ; i<n ; i++)
        {
            if(stalls[i]-lastCow >= distance)
            {
                cntCow++;
                lastCow = stalls[i];
                
                //check if all cows are placed
                if(cntCow>=cows)
                return true;
            }
        }
        return false;
    }
public:

    int solve(int n, int k, vector<int> &stalls) {
        sort(stalls.begin(),stalls.end());
        int maxi = INT_MIN;
        int mini = INT_MAX;
        
        for(int i = 0 ; i<n ; i++)
        {
            maxi = max(stalls[i],maxi);
            mini = min(stalls[i],mini);
        }
        
        //start with a minimum distance of 1 to maxi-mini;
        // for(int i = 1 ; i<=maxi-mini ; i++)
        // {
        //     if(canPlace(stalls,i,k))
        //     {
        //         ans = i;
        //         continue;
        //     }
        //     else
        //     {
        //         break;
        //     }
        // }
        
        //binary search
        
        int low = 1;
        int high = maxi-mini;
        
        while(low <= high)
        {
            long long int mid = low + (high-low)/2;
            if(canPlace(stalls,mid,k))
            {
                low = mid+1;
            }
            else
            {
                high = mid-1;
            }
        }
        return high;
    }
};