class Solution {
    private:
    void solve(int col,int n,vector<string>&board,vector<vector<string>>& ans,
    vector<int>& leftRow,vector<int>& leftUpperDiagonal,vector<int>& bottomLeftDiagonal)
    {
        if(col == n)
        {
            ans.push_back(board);
            return ;
        }
        for(int row = 0 ; row<n ; row++)
        {
            if(leftRow[row] == 0 && leftUpperDiagonal[(n-1)+(col-row)] == 0 && 
            bottomLeftDiagonal[row+col] == 0)
            {
                board[row][col] = 'Q';
                leftRow[row] = 1;
                leftUpperDiagonal[(n-1)+(col-row)] = 1;
                bottomLeftDiagonal[row+col] = 1;

                solve(col+1,n,board,ans,leftRow,leftUpperDiagonal,bottomLeftDiagonal);

                board[row][col] = '.';
                leftRow[row] = 0;
                leftUpperDiagonal[(n-1)+(col-row)] = 0;
                bottomLeftDiagonal[row+col] = 0;
            }
        }
    }
public:
    vector<vector<string>> solveNQueens(int n) {
        vector<vector<string>> ans;
        vector<string> board(n);
        string s(n,'.');
        for(int i = 0 ; i<n ; i++)
        {
            board[i] = s;
        }
        vector<int> leftRow(n,0);
        vector<int> leftUpperDiagonal(2*n-1,0);
        vector<int> bottomLeftDiagonal(2*n-1,0);

        solve(0,n,board,ans,leftRow,leftUpperDiagonal,bottomLeftDiagonal);

        return ans;
    }
};