class Solution {
public:
    void solveSudoku(vector<vector<char>>& board) {
        int row = 0;
        solve(board,row);
    }
    bool solve(vector<vector<char>>& board , int row)
    {
        for(int i = row ; i<9 ; i++)
        {
            for(int j = 0 ; j<9 ; j++)
            {
                if(board[i][j] == '.')
                {
                    for(char ch = '1' ; ch <= '9' ; ch++)
                    {
                        if(isPossibleToPlace(i,j,ch,board))
                        {
                            board[i][j] = ch;
                            if(solve(board,i) == true)
                            {
                                return true;
                            }
                            else
                            {
                                board[i][j] = '.';
                            }
                        }
                    }
                    return false;
                }
            }
        }
        return true;
    }

    bool isPossibleToPlace(int row , int col , char ch , vector<vector<char>>& board)
    {
        for(int i = 0 ; i<9 ; i++)
        {
            //check for row
            if(board[row][i] == ch)
            {
                return false;
            }

            //check for column
            if(board[i][col] == ch)
            {
                return false;
            }

            //check for sub block of size 3 * 3
            int sub_row = (3 * (row/3) + i / 3);
            int sub_col = (3 * (col/3) + i % 3);

            if(board[sub_row][sub_col] == ch)
            {
                return false;
            }
        }
        return true;
    }
};