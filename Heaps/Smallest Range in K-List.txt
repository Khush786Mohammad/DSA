class node
{
    public : 
    int data;
    int row;
    int col;
    
    node(int data , int i , int j)
    {
        this->data = data;
        this->row = i;
        this->col = j;
    }
};

class compare
{
    public : 
    bool operator()(auto *a , auto *b)
    {
        return a->data > b->data;
    }
};

class Solution{
    public:
    pair<int,int> findSmallestRange(int KSortedArray[][N], int n, int k)
    {
        int mini = INT_MAX;
        int maxi = INT_MIN;
        
        priority_queue<node*,vector<node*>,compare> pq;
        
        //now push all the first element of the lists
        
        for(int i = 0 ; i<k ; i++)
        {
            int element = KSortedArray[i][0];
            node* temp = new node(element,i,0);
            pq.push(temp);
            maxi = max(maxi , element);
            mini = min(mini , element);
        }
        
        // now traverse until the heap is empty or one of the list is fully completed
        
        int start = mini , end = maxi;
        int cnt = 0;
        
        while(!pq.empty())
        {
            node* temp = pq.top();
            pq.pop();
            
            mini = temp->data;
            
            if(maxi - mini < end - start)
            {
                start = mini;
                end = maxi;
            }
            
            //next element of the mini value in list
            
            if(temp->col+1 < n)
            {
                int val = KSortedArray[temp->row][temp->col+1];
                maxi = max(maxi , val);
                node* newnode = new node(val,temp->row,temp->col+1);
                pq.push(newnode);
            }
            else
            {
                break;
            }
        }
        
        pair<int,int> ans;
        ans.first = start;
        ans.second = end;
        
        return ans;
    }
};