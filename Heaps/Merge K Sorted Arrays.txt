//{ Driver Code Starts
//Initial Template for C++

#include<bits/stdc++.h>
#define N 105
using namespace std;
void printArray(vector<int> arr, int size)
{
for (int i=0; i < size; i++)
	cout << arr[i] << " ";
}


// } Driver Code Ends
//User function Template for C++

class node
{
    public:
    int data;
    int i;
    int j;
    
    node(int val , int i , int j)
    {
        this->data = val;
        this->i = i;
        this->j = j;
    }
};

class compare
{
    public: 
    
    bool operator()(auto *a , auto *b)
    {
        return a->data > b->data;
    }
};

class Solution
{
    public:
    //Function to merge k sorted arrays.
    vector<int> mergeKArrays(vector<vector<int>> arr, int k)
    {
        // Optimized 
        
        priority_queue<node*,vector<node*>,compare> pq;
        vector<int> ans;
        
        //step 1 : push all first elements of the array
        
        //T.C = k*log(k)
        for(int i = 0 ; i<k ; i++) // T.C = k 
        {
            node *temp = new node(arr[i][0],i,0);
            pq.push(temp); // log(n)
        }
        
        //step 2 : traverse the min heap 
        
        //T.C = k*k log (k)
        while(!pq.empty())
        {
            node *temp = pq.top();
            pq.pop();
            
            ans.push_back(temp->data);
            
            //check if that particular array is not finished
            
            int i = temp->i;
            int j = temp->j;
            
            if(j+1 < arr[i].size())
            {
                node *temp = new node(arr[i][j+1],i,j+1);
                pq.push(temp);
            }
        }
        
        return ans;
       
    }
};

//{ Driver Code Starts.

int main()
{
	int t;
	cin>>t;
	while(t--){
	    int k;
	    cin>>k;
	    vector<vector<int>> arr(k, vector<int> (k, 0));
	    for(int i=0; i<k; i++){
	        for(int j=0; j<k; j++)
	        {
	            cin>>arr[i][j];
	        }
	    }
	    Solution obj;
    	vector<int> output = obj.mergeKArrays(arr, k);
    	printArray(output, k*k);
    	cout<<endl;
    }
	return 0;
}






// } Driver Code Ends