class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int row = obstacleGrid.size();
        int col = obstacleGrid[0].size();

        if(obstacleGrid[0][0] == 1)
        return 0;

        vector<vector<int>> dp(row,vector<int>(col,0));

        dp[0][0] = 1;

        for(int i = 0 ; i<row ; i++)
        {
            for(int j = 0 ; j<col ; j++)
            {
                int right = 0;
                int bottom = 0;
                if(i == 0 && j == 0 || obstacleGrid[i][j] == 1) continue;
                if(i > 0) 
                {
                    bottom = dp[i-1][j];
                }
                if(j > 0)
                {
                    right = dp[i][j-1];
                }
                dp[i][j] = bottom+right;
            }
        }
        return dp[row-1][col-1];

        //return f(row-1,col-1,obstacleGrid,dp);
    }
};