class Solution {
public:
    int minFallingPathSum(vector<vector<int>>& matrix) {
        int n = matrix.size();
        vector<int> dp1(n,0);
        vector<int> dp2(n,0);

        int ans = INT_MAX;

        for(int i = 0 ; i<n ; i++)
        {
            dp1[i] = matrix[0][i];
            if(n == 1)
            ans = min(ans,dp1[i]);
        }

        for(int i = 1 ; i<n ; i++)
        {
            for(int j = 0 ; j<n ; j++)
            {
                int down = dp1[j];
                int upLeft = INT_MAX;
                if(j > 0) upLeft = dp1[j-1];
                int upRight = INT_MAX;
                if(j<n-1) upRight = dp1[j+1];

                dp2[j] = min(down,min(upLeft,upRight)) + matrix[i][j];
                if(i == n-1)
                ans = min(ans,dp2[j]);
            }
                dp1 = dp2;
        }
        return ans;
    }
};