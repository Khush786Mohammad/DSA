class Solution {
    private:
    int solve(vector<vector<int>>& grid , int i , int j , vector<vector<int>>& dp)
    {
        if(i == 0 && j == 0)
        {
            return grid[i][j];
        }
        else if(i < 0 || j < 0)
        {
            return -1;
        }

        if(dp[i][j] != -1)
        {
            return dp[i][j];
        }

        int left = INT_MAX;
        int up = INT_MAX;

        int leftCall = solve(grid,i,j-1,dp);
        int upCall = solve(grid,i-1,j,dp);

        if(leftCall != -1)
        left = leftCall;

        if(upCall != -1)
        up = upCall;

        return dp[i][j] = min(left,up) + grid[i][j];
    }
public:
    int minPathSum(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        vector<vector<int>> dp(m,vector<int>(n,-1));
        return solve(grid,m-1,n-1,dp);
    }
};