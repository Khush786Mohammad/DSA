class Solution {
    private:
    int solve(int ind , vector<int> &nums , vector<int>& dp)
    {
        if(ind == 0)
        return nums[0];
        else if(ind < 0)
        return 0;

        if(dp[ind] != -1)
        return dp[ind];
        int pick = nums[ind] + solve(ind-2,nums,dp);
        int notPick = 0 + solve(ind-1,nums,dp);

        return dp[ind] = max(pick , notPick);
    }
public:
    int rob(vector<int>& nums) {
        vector<int> temp1 , temp2; 
        int n = nums.size();

        if(n == 1)
        return nums[0];

        for(int i = 0 ; i<n ; i++)
        {
            if(i != 0) temp1.push_back(nums[i]);
            if(i != n-1) temp2.push_back(nums[i]);
        }

        vector<int> dp(n-1,-1);
        
        int val1 = solve(n-2,temp1,dp);

        for(int i = 0 ; i<n-1 ; i++)
        dp[i] = -1;
        int val2 = solve(n-2,temp2,dp);

        return max(val1,val2);
    }
};