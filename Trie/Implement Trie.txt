class TrieNode{
    public:
    char data;
    TrieNode* children[26];
    bool isTerminal;

    TrieNode(char data)
    {
        this->data = data;
        for(int i = 0 ; i < 26 ; i++)
        {
            this->children[i] = NULL;
        }
        isTerminal = false;
    }
};

class Trie {
public:
    TrieNode* root;
    Trie() {
        root = new TrieNode('\0');
    }
    
    void insertUtil(TrieNode* root , string word)
    {
        //base case if reach the end of my word
        if(word.length() == 0)
        {
            root->isTerminal = true;
            return ;
        }

        int index = word[0]-'a';
        TrieNode* child;

        //if the character is already present

        if(root->children[index] != NULL)
        {
            child = root->children[index];
        }

        // the character is not present

        else
        {
            child = new TrieNode(word[0]);
            root->children[index] = child;
        }

        //recursion call
        insertUtil(child , word.substr(1));
    }

    void insert(string word) {
         insertUtil(root,word);
    }
    
    bool searchUtil(TrieNode* root , string word)
    {
        //base case
        if(word.length() == 0)
        {
            return root->isTerminal;
        }

        int index = word[0]-'a';
        TrieNode* child;

        if(root->children[index] != NULL)
        {
            child = root->children[index];
        }
        else
        {
            return false;
        }
        //recursion call
        return searchUtil(child,word.substr(1));
    }
    bool search(string word) {
        return searchUtil(root,word);
    }
    
    bool startWithUtil(TrieNode* root , string word)
    {
        //base case
        if(word.length() == 0)//mean the last character is present
        {
            return true;
        }

        int index = word[0]-'a';
        TrieNode* child;

        if(root->children[index] != NULL)
        {
            child = root->children[index];
        }
        else
        {
            return false;
        }
        return startWithUtil(child,word.substr(1));
    }
    bool startsWith(string prefix) {
        return startWithUtil(root,prefix);
    }
};